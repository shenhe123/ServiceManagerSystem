apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-parcelize'

android {
    namespace 'com.jssg.servicemanagersystem'
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.jssg.servicemanagersystem"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        flavorDimensions "service"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("${STORE_FILE}")
            storePassword "${STORE_PWD}"
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PWD}"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }

        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi-v7a','arm64-v8a'
            }
            // 批量打包
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (variant.buildType.name == "release") {
                        outputFileName = "v${defaultConfig.versionName}_release.apk"
                    } else if (variant.buildType.name == "debug") {
                        outputFileName = "v${defaultConfig.versionName}_debug.apk"
                    }
                }
            }
        }
    }

    productFlavors {
        //进入测试环境可以使用此渠道
        sms_test {
            buildConfigField "boolean", "IS_TEST_HOST", "true"
            buildConfigField "boolean", "SSL_ENABLE", "false"
        }
        //企业版使用渠道
        sms_release {
            buildConfigField "boolean", "IS_TEST_HOST", "false"
            buildConfigField "boolean", "SSL_ENABLE", "true"
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    lint {
        abortOnError false
        checkDependencies true
        checkReleaseBuilds false
        disable 'GoogleAppIndexingWarning'
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {

    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'
    def core_version = "1.6.0"
    implementation "androidx.core:core-ktx:$core_version"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    def lifecycle_version = '2.3.1'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation ("com.squareup.okhttp3:okhttp:4.9.0"){
        exclude module: 'kotlin-stdlib'
    }
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1")

    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version") {
        exclude group: 'com.android.dataBinding', module: 'compiler'
    }

    implementation "androidx.activity:activity-ktx:1.3.1"

    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    implementation 'com.github.bumptech.glide:glide:4.15.1'

    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.10'

    // 动态权限
    implementation 'com.github.arvinljw:PermissionHelper:v2.0.1'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'

    implementation 'com.jakewharton.rxbinding2:rxbinding:2.2.0'

    implementation 'com.google.code.gson:gson:2.8.9'

    implementation 'com.tencent:mmkv:1.2.14'

    implementation 'com.baidu.lbsyun:BaiduMapSDK_Location_All:9.3.7'

    // PictureSelector basic (Necessary)
    implementation 'io.github.lucksiege:pictureselector:v3.11.1'

    implementation 'com.nex3z:flow-layout:1.3.3'

    implementation 'com.tencent.bugly:crashreport:latest.release'

    implementation  'io.github.scwang90:refresh-layout-kernel:2.0.6'      //核心必须依赖
    implementation  'io.github.scwang90:refresh-header-classics:2.0.6'    //经典刷新头
    implementation  'io.github.scwang90:refresh-footer-classics:2.0.6'    //经典加载

    implementation project(':pickerview')

    implementation 'top.zibin:Luban:1.1.8'
}